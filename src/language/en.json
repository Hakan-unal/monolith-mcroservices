{
    "title1": "What Is Microservices Architecture ?",
    "title2": "Why Microservices Architecture ?",
    "title3": "Advantages",
    "title4": "Disadvantages",
    "paragraph1": "Microservices architecture is essentially an architectural approach to building cloud applications. This approach allows parts within a complex and complex application to survive on their own and operate independently of other parts. These parts, which are divided into smaller parts and can communicate with each other, have their own business rules and definitions. From a general perspective, rather than collecting all layers in one spot (BE-FE-DB), this architecture example offers us a formula for flexibility and code complexity prevention. Considering that the code layout of the monolithic architecture may become complex in the long run and that the end user may experience problems with the requests, using a more modular structure will be an important issue.",
    "paragraph2": "To explain in frontend language, it is seen that the structure in the application is modular and managed based on components. However, the pages do not affect each other due to errors. We can say the example here in a microservice architecture similarly. In the platform where there are multiple databases, services and layers, when the end user makes a request from a mobile, web or desktop application, it can be redirected differently according to the load distribution or the platform from which the request comes. We see the use of apigateways in terms of routing the incoming request. For more voluminous applications, however, the load balancer used by the servers is used for load balancing and to make the traffic more manageable.",
    "paragraph3": "Multiple programming languages ​​can be used. It provides the advantage of using the features and advantages of frameworks in the project in accordance with the needs of this application. It allows you to use the ability to develop different modules in various languages ​​within a large-scale application. For example, you can develop login processes and user registration processes with java and code the services that the products connected to the user come from in the application with python.",
    "paragraph4": "Since it is a modular structure, in case of an error, instead of losing the entire application, there will be a problem with the section with the error. The user can enter and browse through the application, add the products to his cart, and if there is a problem with payment services, it does not prevent the user from performing other transactions.",
    "paragraph5": "Manageability and scalability in requests coming into the application are advantages for us. Consider that the maintenance for a monolith architecture is to cover all services and the entire hosted server, but you can distribute and balance the load by using both multiple servers and load balancers.",
    "paragraph6": "We talked about the modular structure, in the code development process, working on smaller pieces of code compared to the monolith architecture and distributing your teams to the parts of these microservices is very convenient for controllability and agile processes.",
    "paragraph7": "When it is above a certain scale, the management of your microservices can become difficult, although changes can be made, it is necessary to be very careful because it can be used at more than one point.",
    "paragraph8": "Since you may have tens or even 100s of services, logging and monitoring is necessary in order to catch and monitor instantly when there is a problem.",
    "paragraph9": "The choice of architecture suitable for the needs of the application is an important issue. The need may vary according to each application, and different advantages and disadvantages may occur. You need qualified teams for security maintenance and all other services."
}