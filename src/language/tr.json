{
    "title1": "Mikroservis Mimarisi Nedir ?",
    "title2": "Neden Mikroservis Mimarisi ?",
    "title3": "Avantajları",
    "title4": "Dezavantajları",
    "paragraph1": "Mikroservis mimarisi özünde bulut uygulamları oluşturmaya yönelik bir mimari yaklaşımdır. Bu yaklaşım karmaşık ve komplex bir uygulama içerisindeki parçaların kendi başlarına hayatta kalmasına ve diğer parçalardan bağımsız bir şekilde çalışmasına olanak sağlar. Daha küçük parçalara ayrılmış ve birbirleriyle haberleşebilen bu parçaların kendilerine ait iş kuralları ve tanımları vardır. Genel perspektif üzerinde bakılacak olursa bütün katmanların tek bir noktada toplanmasındansa (BE-FE-DB) bu mimari örneği bize esneklik yeteneği ve kod açısından karmaşıklığı önleyici bir formül sunar. Monolithic mimarinin uzun vadede kod düzeninin karmaşık hale gelebileceği ve bununla birlikte son kullanıcı tarafından gelen isteklerde sorun yaşabileceği düşünülürse daha modüler bir yapı kullanmak önemli bir konu olacaktır. ",
    "paragraph2": "Frontend diliyle anlatmak gerekirse uygulama içerisindeki yapının modüler olduğu ve component bazlı yönetildiği görülür. Bununla birlikte sayfalar hata kaynaklı birbirini etkilemez. Buradaki örneği benzer şekilde mikroservis mimari içinde söyleyebiliriz. Birden çok database, servis ve katman olduğu platformda son kullanıcı mobil, web veya masaüstü uygulamadan istek attığında yük dağılımına göre veya isteğin geldiği platforma göre farklı şekilde yönlendirilebilir. Gelen isteği yönlendirme açısından kullanımı apigatewaylerle görürüz. Daha hacimli uygulamalar için bununla birlikte sunucular tarafında kullanılan load balancer yük dengelemede ve trafiği daha yönetilebilir hale getirmek için kullanılır.",
    "paragraph3": "Birden çok yazılım dili kullanılabilir. Bu uygulamanın ihtiyaçlarına uygun şekilde frameworklerin özelliklerini ve avantajlarını proje içerisinde kulkanbilme avantajı sağlar. Büyük ölçekli bir uygulama içerisinde farklı modülleri çeşitli dillerde de geliştirebilme olanağını kullanmanızı sağlar. Örnek vermek gerekirse login süreçlerini ve user kayıt işlemlerini java ile geliştirip uygulama içerisinde kullanıcıya bağlı ürünlerin geldiği servisleri python ile kodlayabilirsiniz. ",
    "paragraph4": "Modüler bir yapı olduğundan dolayı hata alınması durumunda tüm uygulamayı kaybektense ilgili hatanın olduğu bölümle ilgili sorun yaşanır. Kullnıcı uygulama içerisinde girip gezinebilir inceleme yapabilir ürünleri sepetine de ekleyebilir ödeme servisleriyle ilgili sorun varsa kullanıcının diğer işlemleri yapmasına engel bir durum teşkil etmez.",
    "paragraph5": "Yönetilebilirlik ve uygulama içerisine gelen isteklerde ölçeklenbilirlik bizim için avantaj. Monolit bir mimari için bakım tüm servislerde ve host edilen sunucunun tamamını kapsayacak şekilde olduğunu düşünün ancak hem birden fazla sunucu hem load balancer kullanımı ile yükü dağıtıp bunu dengeleyebilirisiniz.",
    "paragraph6": "Modüler yapıdan bahsetmiştik kod geliştirme sürecinde monolit mimariye göre daha küçük kod parçaları üzerinde çalışmak ve ekiplerinizi bu mikroservislerin parçalarına dağıtmak kontrol edilebilirlik açısından ve agile süreçleri için oldukça elverişli",
    "paragraph7": "Belirli bir ölçeğin üzerinde olduğunda mikroservislerinizin yönetimi zor hale gelebilir değişiklik yapılabilir olsa da birden fazla noktada kullanımı olabileceğinden oldukça dikkat etmek gerekir.",
    "paragraph8": "10 larca hatta 100 lerce servisiniz olabileceğinden bir sorun olduğunda anlık yakalayabilmek ve takip etmek açısından loglama ve monitoring etmek gerekli.",
    "paragraph9": "Uygulamanın ihtiyaçlarına uygun mimari tercihi önemli bir konu. Her uygulamaya göre ihtiyaç değişebilir farklı aavntajları ve dezavantajları oluşabilir. Güvenlik bakım ve diğer tüm hizmetler için nitelikli ekiplere ihtiyacınız vardır."
}