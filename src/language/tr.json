{
    "title1": "Mikroservis Mimarisi Nedir ?",
    "title2": "Neden Mikroservis Mimarisi ?",
    "title3": "Avantajları",
    "title4": "Dezavantajları",
    "paragraph1": "Mikroservis mimarisi özünde bulut uygulamları oluşturmaya yönelik bir mimari yaklaşımdır. Bu yaklaşım karmaşık ve komplex bir uygulama içerisindeki parçaların kendi başlarına hayatta kalmasına ve diğer parçalardan bağımsız bir şekilde çalışmasına olanak sağlar. Daha küçük parçalara ayrılmış ve birbirleriyle haberleşebilen bu parçaların kendilerine ait iş kuralları ve tanımları vardır. Genel perspektif üzerinde bakılacak olursa bütün katmanların tek bir noktada toplanmasındansa (BE-FE-DB) bu mimari örneği bize esneklik yeteneği ve kod açısından karmaşıklığı önleyici bir formül sunar. Monolithic mimarinin uzun vadede kod düzeninin karmaşık hale gelebileceği ve bununla birlikte son kullanıcı tarafından gelen isteklerde sorun yaşabileceği düşünülürse daha modüler bir yapı kullanmak önemli bir konu olacaktır. ",
    "paragraph2": "SPA ile sunucudaki yük daha da hafifletildi ve istemci tarafına daha çok yük bindi. Gelişen tarayıcılar, internet ve bilgisayar bu yükü daha az hissetmemize neden oldu. Routing işleminin tüm kullanıcılar için tek bir sunucuda gerçekleştirilmesi yerine her kullanıcının kendi tarayıcında gerçekleştirilebilir olması bize daha hızlı internet deneyimi sağladı. Birçok yeni framework'ün ortaya çıkmasının altındaki sebeplerden birisi aslında bu internette daha hızlı gezinme vaadi sunuyorlar. Frameworklerin çıkış hızına yetişebilenlerdenseniz son yıllarda popülerliğini arttıran ve birçok JavaScript frameworkünün benimsediği avantajları olduğu kadar dezavantajları da olan bu konuya birlikte kısaca bakalım.",
    "paragraph3": "SPA uygulamalarında bütün sayfa yenilenmez, bu bize hız farkını gösterir. Uygulama kaynak dosyaları ilk yükleme anında sunucudan gelir ve değiştiğini gördüğümüz veri olur, bu yüzden de uygulama ilk yükleme sonrasında sayfa geçişlerinde çok hızlı olur.",
    "paragraph4": "İlk yükleme anından sonra internetiniz yavaş olsa bile veya internet bağlantınız kopsa dahi uygulama içerisinde kalmaya devam edebilirsiniz. Önbellek yönetimi konusunda ve kullanıcı deneyimi açısından önemli ve etkili bir özellik.",
    "paragraph5": "Yazılım geliştiricileri açısından bu parçalı component yapısı modüler geliştirmeye olanak sağlamakta. Uygulamanın belirli bir bölümünde hata olsa bile bütün uygulamayı etkilemeyen bir süreçle karşılaşırsınız veya bununla birlikte geliştirme yaparken süreçleri birbirinden ayırıp geliştirme sürecini daha rahat yönetebilirsiniz.",
    "paragraph6": "Yeni frameworklerle birlikte ortaya çıkan toollarla bug çözümleri daha rahat hale geldi. Bu toolları kullanarak yazılım geliştirme sürecindeki hızınızı arttırabilirsiniz. Modern birçok frameworkün(React, VueJS, AngularJS) tarayıcılarda toolları mevcut.",
    "paragraph7": "SEO konusunda eksik kalıyor, bunun nedeni arama motorunun uygulamayı tek sayfa olarak görmesi ve dinamik değişikliği algılamaması. Gelişen süreçte bu soruna çözümler getirmeye çalışan ve geliştirmeyi amaçlayan frameworkler mevcut NextJS bunlardan biri. Bunun dışında google tarafında da sorunu atlatabilmek açısından geliştirmeler yapılmakta.",
    "paragraph8": "Eğer geliştirme sürecinde dikkatli değilseniz ve gözden kaçan noktalar oluşmuşsa bu birçok kullanılmayan gereksiz datanın sayfalar arasında gezinmesine neden olur. State yönetimi ve modül geçişlerinde bunları doğru şekilde temizlemek önemli bir konu.",
    "paragraph9": "Routing süreçlerinde bir önceki web sayfasına gitmeniz veya hata almanız kaçınılmaz. Bu yüzden SPA uygulamaları için global paket yöneticileri(npm, yarn) içerisinde tarayıcı geçmişini yönetebileceğiniz paketler bulunmakta."
}